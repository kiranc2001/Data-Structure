46. Permutations
Solved
Medium
Topics
Companies
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.


Solution: O(n! * n) O(n)



class Solution {
    public List<List<Integer>> permute(int[] nums) {
        
    List<List<Integer>> result = new ArrayList<>();
    List<Integer> current = new ArrayList<>();
    boolean[] visited= new boolean[nums.length];
    backtrack(nums,visited, current, result);
    return result;
    
        }

     private void backtrack(int[] nums, boolean[] visited, List<Integer> current, List<List<Integer>> result){

         if (current.size() == nums.length) {
            result.add(new ArrayList<>(current));  // Add the current permutation to the res
            return;
        }

        for(int i=0;i<nums.length;i++){
            if(visited[i] ) continue;


            current.add(nums[i]);
            visited[i]=true;
backtrack(nums,visited,current,result);
            current.remove(current.size()-1);
            visited[i]=false;
        }
     }


}
